#include <Wire.h>
#include "MCP3221.h"
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <BH1750.h>
#include "SparkFun_SGP30_Arduino_Library.h"
#include <I2C_graphical_LCD_display.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <WiFiClientSecure.h>

#define BOT_TOKEN "xxxxxxxxxxx"  // –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
#define WIFI_SSID "xxxxxxx"      // –ò–º—è —Å–µ—Ç–∏ WI-FI
#define WIFI_PASSWORD "xxxxxxxx" // –ü–∞—Ä–æ–ª—å —Å–µ—Ç–∏ WI-FI

const unsigned long BOT_MTBS = 1000; 
WiFiClientSecure secured_client; 
UniversalTelegramBot bot(BOT_TOKEN, secured_client); 
unsigned long bot_lasttime; 

TaskHandle_t Task1;
TaskHandle_t Task2;

I2C_graphical_LCD_display lcd;

BH1750 lightMeter; 

MCP3221 mcp3221(0x4D); // –ê–¥—Ä–µ—Å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è

Adafruit_BME280 bme280;

SGP30 mySensor ;

float t;
float h;
float p;
float lux;
float sensorVoltage;
float UV_index;
float tvoc;
float co2;

#define I2C_HUB_ADDR        0x70
#define EN_MASK             0x08
#define DEF_CHANNEL         0x00
#define MAX_CHANNEL         0x08

void setup() {
  Serial.begin(115200);
  Wire.begin();
  bme280.begin();
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD); 
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT); 
  while (WiFi.status() != WL_CONNECTED) 
  {
    Serial.print(".");
    delay(250);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());
 
  setBusChannel(0x04);
  lcd.begin();
  lcd.gotoxy (0, 0);
  lcd.clear (0, 0, 128, 64, 0x00);
  
  setBusChannel(0x06);
  mcp3221.setVinput(VOLTAGE_INPUT_5V);

  setBusChannel(0x07); 
  lightMeter.begin();

  setBusChannel(0x05);
  if (mySensor.begin() == false) {
    Serial.println("No SGP30 Detected. Check connections.");
    while (1);
  }
  mySensor.initAirQuality();

  setBusChannel(0x05);
  for(int i=0;i<=20;i++){
  mySensor.measureAirQuality();
  co2 = mySensor.CO2;
  tvoc = mySensor.TVOC;
  Serial.print("CO2: ");
  Serial.print(mySensor.CO2);
  Serial.print(" ppm\tTVOC: ");
  Serial.print(mySensor.TVOC);
  Serial.println(" ppb");
  delay (1000);
  }

 //—Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —è–¥—Ä–µ 0 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (1)
  xTaskCreatePinnedToCore(
                    Task1code,   /* –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—á–∏. */
                    "Task1",     /* –ï–µ –∏–º—è. */
                    10000,       /* –†–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ */
                    NULL,        /* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã */
                    1,           /* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */
                    &Task1,      /* –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
                    1);          /* –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —è–¥—Ä–∞ */                  
  delay(500); 
//–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —è–¥—Ä–µ 1 —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (1)
  xTaskCreatePinnedToCore(
                    Task2code,   /* –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–∞—á–∏. */
                    "Task2",     /* –ò–º—è –∑–∞–¥–∞—á–∏. */
                    10000,       /* –†–∞–∑–º–µ—Ä —Å—Ç–µ–∫–∞ */
                    NULL,        /* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ */
                    2,           /* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */
                    &Task2,      /* –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
                    1);          /* –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–Ω –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ */
    delay(500); 
    
}

void Task1code( void * pvParameters ){
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());
  for(;;){
  if (millis() - bot_lasttime > BOT_MTBS) // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  {
    // –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ
    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
    bot_lasttime = millis();
  }
  }
}

void handleNewMessages(int numNewMessages)
{
  
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = bot.messages[i].chat_id; // ID —á–∞—Ç–∞
    String text = bot.messages[i].text; // —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    //text.toLowerCase(); // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä Ff
    String from_name = bot.messages[i].from_name; // –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (from_name == "")
      from_name = "Guest";

    if (text == "/THP")
    {
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: " + String(t, 1) + " ¬∞C\n";
      welcome += "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + String(h, 0) + " %\n";
      welcome += "‚òÅ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: " + String(p, 0) + " –º–º —Ä—Ç.—Å—Ç.\n";
      bot.sendMessage(chat_id, welcome, "");
      
    }
  
    if (text == "/illumination")
    {
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += "‚òÄ –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: " + String(lux, 0) + " –õ–∫\n";
      bot.sendMessage(chat_id, welcome, "");
    }

    if (text == "/UV")
    {
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += "üìä –£—Ä–æ–≤–µ–Ω—å –£–§: " + String(sensorVoltage, 0) + " mV\n";
      welcome += "üîÜ –ò–Ω–¥–µ–∫—Å –£–§: " + String(UV_index, 0) + " \n";
      bot.sendMessage(chat_id, welcome, "");
    }
    
    if (text == "/CO2")
    {
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n";
      welcome += " –£—Ä–æ–≤–µ–Ω—å —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞: " + String(co2, 0) + " ppm\n";
      welcome += " –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è TVOC: " + String(tvoc, 0) + " ppb\n";
      bot.sendMessage(chat_id, welcome, "");
    }
    

  
    if (text == "/start")
    {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:", "");
      String sms =  "/illumination - —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç–∏.";
      String sms1 =" /THP - –≤—ã–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏ –¥–∞–≤–ª–µ–Ω–∏—è.";
      String sms2 =" /UV - –≤—ã–≤–æ–¥ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å–∞ —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è.";
      String sms3 =" /CO2 - –≤—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CO2 –∏ TVOC.";
      bot.sendMessage(chat_id, sms, "");
      bot.sendMessage(chat_id, sms1, "");
      bot.sendMessage(chat_id, sms2, "");
      bot.sendMessage(chat_id, sms3, "");
    }
  }
}

void Task2code( void * pvParameters ){
  Serial.print("Task2 running on core ");
  Serial.println(xPortGetCoreID());
  for(;;){
  t = bme280.readTemperature();
  h = bme280.readHumidity();
  p = bme280.readPressure() / 100.0F;
  // –í—ã–≤–æ–¥ –∏–∑–º–µ—Ä–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
  Serial.println("Air temperature = " + String(t, 1) + " *C");
  Serial.println("Air humidity = " + String(h, 1) + " %");
  Serial.println("Air pressure = " + String(p, 1) + " hPa"); // 1 mmHg = 1 hPa / 1.33
  
  setBusChannel(0x04);
  lcd.clear (0, 0, 128, 64, 0x00);
  lcd.gotoxy (40, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,53)
  lcd.string ("Temperature, C" , false); // –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  char buf[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf, "%d", (int)t); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
  lcd.gotoxy (10, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,53)
  lcd.string (buf, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  lcd.gotoxy (40, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,39)
  lcd.string ("Humidity, %" , false);// –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  char buf1[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf1, "%d", (int)h); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  lcd.gotoxy (10, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,39)
  lcd.string (buf1, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  lcd.gotoxy (40, 22); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,22)
  lcd.string ("Pressure, hPa" , false); // –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è
  char buf2[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf2, "%d", (int)p); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏
  lcd.gotoxy (10, 22); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,22)
  lcd.string (buf2, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
  delay(2000);
  lcd.clear (0, 0, 128, 64, 0x00);
  
  // –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤
  setBusChannel(0x07);
  lux = lightMeter.readLightLevel(); // —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
  Serial.print("–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: ");
  Serial.print(lux);
  Serial.println(" –õ—é–∫—Å");

  float sensorValue;
  setBusChannel(0x06);
  sensorValue = mcp3221.getVoltage();
  sensorVoltage = 1000 * (sensorValue / 4096 * 5.0); // –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞ –ê–¶–ü
  UV_index = 370 * sensorVoltage / 200000; // –ò–Ω–¥–µ–∫—Å –£–§ (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ)
  Serial.println("–í—ã—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ = " + String(sensorVoltage, 1) + "–º–í");
  Serial.println("UV index = " + String(UV_index, 1));
  
  setBusChannel(0x04);
  lcd.gotoxy (40, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,53)
  lcd.string ("illumin,Lux" , false);
  char buf3[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf3, "%d", (int)lux); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ–± –û–°–í–ï–©–Å–ù–ù–û–°–¢–ò
  lcd.gotoxy (10, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,53)
  lcd.string (buf3, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  lcd.gotoxy (40, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,39)
  lcd.string ("output volt,mV" , false);// –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  char buf4[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf4, "%d", (int)sensorVoltage); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ –í–∞–ª—å—Ç–∞–∂–µ
  lcd.gotoxy (10, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,39)
  lcd.string (buf4, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  lcd.gotoxy (40, 22); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,22)
  lcd.string ("UV ind., V/cm2" , false); // –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è
  char buf5[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf5, "%d", (int)UV_index); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ –£–§
  lcd.gotoxy (10, 22); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,22)
  lcd.string (buf5, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –£–§
  delay(2000);
  lcd.clear (0, 0, 128, 64, 0x00);

  setBusChannel(0x05);

  mySensor.measureAirQuality();
  co2 = mySensor.CO2;
  tvoc = mySensor.TVOC;
  Serial.print("CO2: ");
  Serial.print(mySensor.CO2);
  Serial.print(" ppm\tTVOC: ");
  Serial.print(mySensor.TVOC);
  Serial.println(" ppb");
  
  setBusChannel(0x04);
  lcd.gotoxy (40, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,53)
  lcd.string ("CO2, ppm" , false);
  char buf6[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf6, "%d", (int)mySensor.CO2); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ–± CO2
  lcd.gotoxy (10, 53); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,53)
  lcd.string (buf6, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  lcd.gotoxy (40, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (40,39)
  lcd.string ("TVOC, ppb" , false);// –ø–∏—à–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
  char buf7[8]; // —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char
  sprintf(buf7, "%d", (int)mySensor.TVOC); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –¥–∞–Ω–Ω—ã–µ –æ TVOC
  lcd.gotoxy (10, 39); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (10,39)
  lcd.string (buf7, false); // –ü–∏—à–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  delay(2000);
  lcd.clear (0, 0, 128, 64, 0x00);
  
}
}
// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ I2C
bool setBusChannel(uint8_t i2c_channel)
{
  if (i2c_channel >= MAX_CHANNEL)
  {
    return false;
  }
  else
  {
    Wire.beginTransmission(I2C_HUB_ADDR);
   Wire.write(0x01 << i2c_channel); 
	 
    Wire.endTransmission();
    return true;
  }
}

void loop() { }






